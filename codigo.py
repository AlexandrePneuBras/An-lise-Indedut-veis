# -*- coding: utf-8 -*-
"""codigo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O_2pPmYxASbCkngFxnBjf8ADHhbSGtFG
"""

# prompt: crie um dashboard no streamlit para  a base "Indedutiveis.xlsx"


import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.io as pio

st.set_page_config(layout="wide")

st.title('Dashboard de Análise de Saldos - Indedutíveis')

# Função para carregar e processar os dados
@st.cache_data
def load_data(filepath):
    try:
        df = pd.read_excel(filepath)
        df['Dt. Movimento'] = pd.to_datetime(df['Dt. Movimento'], errors='coerce')
        if df['Saldo mês'].dtype == 'object':
            df['Saldo mês'] = df['Saldo mês'].str.replace('.', '', regex=False).str.replace(',', '.', regex=False).astype(float)
        df['Saldo mês'] = pd.to_numeric(df['Saldo mês'], errors='coerce')
        df.dropna(subset=['Saldo mês', 'Dt. Movimento'], inplace=True)
        return df
    except FileNotFoundError:
        st.error(f"O arquivo '{filepath}' não foi encontrado.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar ou processar o arquivo: {e}")
        return pd.DataFrame()

# Carregar os dados
df = load_data(r'C:\Users\alexandre.rego\Desktop\Uninassau\Indedutiveis.xlsx')

if not df.empty:
    pio.templates.default = "plotly_white"

    # Métricas principais
    total_saldo = df['Saldo mês'].sum()
    num_registros = len(df)
    media_saldo = df['Saldo mês'].mean()

    col1, col2, col3 = st.columns(3)
    col1.metric("Total do Saldo", f"R$ {total_saldo:,.2f}")
    col2.metric("Número de Registros", num_registros)
    col3.metric("Saldo Médio por Registro", f"R$ {media_saldo:,.2f}")

    st.markdown("---")

    # Análises e Gráficos
    st.header("Análise por Centro de Resultado (CR)")

    saldo_por_cr = df.groupby('Descrição CR')['Saldo'].sum().reset_index().sort_values(by='Saldo', ascending=False)
    num_top_cr = st.slider("Selecione o número de Centros de Resultado (CR) para exibir:", 5, 20, 10)
    top_n_cr = saldo_por_cr.head(num_top_cr)

    fig1 = px.bar(
        top_n_cr.sort_values(by='Saldo mês', ascending=True),
        x='Saldo mês',
        y='Descrição CR',
        orientation='h',
        title=f'<b>Top {num_top_cr} Centros de Resultado (CR) por Soma de Saldo</b>',
        text='Saldo mês',
        color='Saldo mês',
        color_continuous_scale=px.colors.sequential.Viridis,
        labels={'Saldo mês': 'Soma do Saldo', 'Descrição CR': 'Centro de Resultado'}
    )
    fig1.update_traces(
        texttemplate='R$ %{text:,.2f}',
        textposition='outside',
        marker_line_color='rgb(8,48,107)',
        marker_line_width=1.5
    )
    fig1.update_layout(
        xaxis_title='Soma do Saldo (R$)',
        yaxis_title='Centro de Resultado',
        font=dict(family="Arial, sans-serif", size=12),
        hovermode='y unified'
    )
    st.plotly_chart(fig1, use_container_width=True)

    st.markdown("---")

    st.header("Análise por Parceiro")

    saldo_por_parceiro = df.groupby('Nome Parceiro')['Saldo'].sum().reset_index().sort_values(by='Saldo', ascending=False)
    num_top_parceiros = st.slider("Selecione o número de Parceiros para exibir:", 5, 20, 10)
    top_n_parceiros = saldo_por_parceiro.head(num_top_parceiros)

    fig2 = px.bar(
        top_n_parceiros.sort_values(by='Saldo mês', ascending=True),
        x='Saldo mês',
        y='Nome Parceiro',
        orientation='h',
        title=f'<b>Top {num_top_parceiros} Parceiros por Soma de Saldo</b>',
        text='Saldo mês',
        color='Saldo mês',
        color_continuous_scale=px.colors.sequential.Plasma,
        labels={'Saldo mês': 'Soma do Saldo', 'Nome Parceiro': 'Parceiro'}
    )
    fig2.update_traces(
        texttemplate='R$ %{text:,.2f}',
        textposition='outside',
        marker_line_color='rgb(8,48,107)',
        marker_line_width=1.5
    )
    fig2.update_layout(
        xaxis_title='Soma do Saldo (R$)',
        yaxis_title='Parceiro',
        font=dict(family="Arial, sans-serif", size=12),
        hovermode='y unified'
    )
    st.plotly_chart(fig2, use_container_width=True)

    st.markdown("---")

    st.header("Evolução Mensal do Saldo")

    num_top_cr_evolucao = st.slider("Selecione o número de Centros de Resultado (CR) para a evolução mensal:", 3, 10, 5)
    top_cr_evolucao_nomes = df.groupby('Descrição CR')['Saldo'].sum().nlargest(num_top_cr_evolucao).index
    df_top_cr_evolucao = df[df['Descrição CR'].isin(top_cr_evolucao_nomes)]
    saldo_mensal_cr = df_top_cr_evolucao.groupby([pd.Grouper(key='Dt. Movimento', freq='M'), 'Descrição CR'])['Saldo mês'].sum().reset_index()
    saldo_mensal_cr['Dt. Movimento'] = saldo_mensal_cr['Dt. Movimento'].dt.strftime('%Y-%m')

    fig3 = px.line(
        saldo_mensal_cr,
        x='Dt. Movimento',
        y='Saldo mês',
        color='Descrição CR',
        title=f'<b>Evolução Mensal do Saldo por Centro de Resultado (Top {num_top_cr_evolucao})</b>',
        markers=True,
        labels={'Saldo mês': 'Soma do Saldo', 'Dt. Movimento': 'Mês', 'Descrição CR': 'Centro de Resultado'}
    )
    fig3.update_traces(
        textposition='top center'
    )
    fig3.update_layout(
        xaxis_title='Mês',
        yaxis_title='Soma do Saldo (R$)',
        font=dict(family="Arial, sans-serif", size=12),
        hovermode='x unified'
    )
    st.plotly_chart(fig3, use_container_width=True)

    st.markdown("---")

    st.header("Dados Brutos")
    st.dataframe(df)
else:
    st.warning("Não foi possível carregar os dados para criar o dashboard.")