# -*- coding: utf-8 -*-
"""codigo.ipynb

Automatically generated by Colab.

Original file is located at
    https://raw.githubusercontent.com/AlexandrePneuBras/An-lise-Indedut-veis/main/Indedutiveis.xlsx
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import plotly.io as pio

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="Dashboard de An√°lise de Saldos",
    page_icon="üìä"
)

# O bloco de st.markdown com o CSS foi removido daqui.

st.title('üìä Dashboard de An√°lise de Saldos - Indedut√≠veis')

# --- Carregamento e Tratamento dos Dados ---
@st.cache_data
def load_data(filepath):
    try:
        df = pd.read_excel(filepath)

        # Tratamento de Colunas Essenciais
        df['Dt. Movimento'] = pd.to_datetime(df['Dt. Movimento'], errors='coerce')
        df.dropna(subset=['Dt. Movimento'], inplace=True)

        # Cria√ß√£o de colunas de data
        df['M√™s/Ano'] = df['Dt. Movimento'].dt.to_period('M')
        df['Nome do M√™s'] = df['Dt. Movimento'].dt.strftime('%B')

        # Tratamento de colunas num√©ricas
        for col in ['Saldo m√™s', 'Saldo Inicial']:
            if col in df.columns:
                if df[col].dtype == 'object':
                    df[col] = df[col].astype(str).str.replace('.', '', regex=False).str.replace(',', '.', regex=True)
                df[col] = pd.to_numeric(df[col], errors='coerce')

        df.dropna(subset=['Saldo m√™s', 'Saldo Inicial'], inplace=True)

        # Garantir que todas as colunas de filtro sejam do tipo string
        filter_cols = ['Descri√ß√£o CR', 'C√≥d. CR', 'Tipo de Despesa', 'Grupo de Contas', 'Grupo Emp', 'Nome Parceiro']
        for col in filter_cols:
            if col in df.columns:
                df[col] = df[col].astype(str).fillna('N√£o especificado')

        return df
    except FileNotFoundError:
        st.error(f"O ficheiro '{filepath}' n√£o foi encontrado.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar ou processar o ficheiro: {e}")
        return pd.DataFrame()

df = load_data("https://raw.githubusercontent.com/AlexandrePneuBras/An-lise-Indedut-veis/main/Indedutiveis.xlsx")

if not df.empty:
    pio.templates.default = "plotly_white"

    # --- L√ìGICA DE FILTROS ---
    st.sidebar.header("‚öôÔ∏è Filtros do Dashboard")

    filter_options = {
        'mes': sorted(df['Nome do M√™s'].unique()),
        'filial': sorted(df['Descri√ß√£o CR'].unique()),
        'conta': sorted(df['C√≥d. CR'].unique()),
        'tipo_despesa': sorted(df['Tipo de Despesa'].unique()),
        'grupo_contas': sorted(df['Grupo de Contas'].unique()),
        'grupo_pneubras': sorted(df['Grupo Emp'].unique()),
        'fornecedor': sorted(df['Nome Parceiro'].unique())
    }

    if 'filters' not in st.session_state:
        st.session_state.filters = {key: options for key, options in filter_options.items()}

    def clear_all_filters():
        st.session_state.filters = {key: options for key, options in filter_options.items()}
        if 'saldo_inicial_range' in st.session_state:
            min_saldo_clear = float(df['Saldo Inicial'].min())
            max_saldo_clear = float(df['Saldo Inicial'].max())
            st.session_state.saldo_inicial_range = (min_saldo_clear, max_saldo_clear)

    st.sidebar.button("üßπ Limpar Todos os Filtros", on_click=clear_all_filters, use_container_width=True)
    st.sidebar.markdown("---")

    def create_multiselect_filter(expander_label, filter_key, expanded=False):
        with st.sidebar.expander(expander_label, expanded=expanded):
            all_key = f'all_{filter_key}'

            if filter_key not in st.session_state.filters:
                st.session_state.filters[filter_key] = filter_options[filter_key]

            is_all_selected = len(st.session_state.filters[filter_key]) == len(filter_options[filter_key])

            def toggle_all():
                selections = st.session_state.filters
                if st.session_state[all_key]:
                    selections[filter_key] = filter_options[filter_key]
                else:
                    selections[filter_key] = []
                st.session_state.filters = selections

            st.checkbox("Selecionar/Limpar Tudo", value=is_all_selected, key=all_key, on_change=toggle_all)

            st.session_state.filters[filter_key] = st.multiselect(
                label=f"Selecione o(s) item(ns)",
                options=filter_options[filter_key],
                default=st.session_state.filters[filter_key]
            )

    create_multiselect_filter("M√™s", 'mes')
    create_multiselect_filter("Filial", 'filial')
    create_multiselect_filter("Conta", 'conta')
    create_multiselect_filter("Tipo de Despesa", 'tipo_despesa')
    create_multiselect_filter("Grupo de Contas", 'grupo_contas')
    create_multiselect_filter("Grupo Pneubras", 'grupo_pneubras')
    create_multiselect_filter("Fornecedor", 'fornecedor')

    with st.sidebar.expander("Saldo Inicial"):
        min_saldo = float(df['Saldo Inicial'].min())
        max_saldo = float(df['Saldo Inicial'].max())

        if min_saldo < max_saldo:
            if 'saldo_inicial_range' not in st.session_state:
                st.session_state.saldo_inicial_range = (min_saldo, max_saldo)

            saldo_range = st.slider(
                "Selecione o intervalo",
                min_value=min_saldo,
                max_value=max_saldo,
                key='saldo_inicial_range'
            )
        else:
            st.info("Intervalo de Saldo Inicial n√£o aplic√°vel (valor √∫nico).")
            saldo_range = (min_saldo, max_saldo)

    # --- Filtragem do DataFrame ---
    df_filtered = df[
        (df['Nome do M√™s'].isin(st.session_state.filters['mes'])) &
        (df['Descri√ß√£o CR'].isin(st.session_state.filters['filial'])) &
        (df['C√≥d. CR'].isin(st.session_state.filters['conta'])) &
        (df['Tipo de Despesa'].isin(st.session_state.filters['tipo_despesa'])) &
        (df['Grupo de Contas'].isin(st.session_state.filters['grupo_contas'])) &
        (df['Grupo Emp'].isin(st.session_state.filters['grupo_pneubras'])) &
        (df['Nome Parceiro'].isin(st.session_state.filters['fornecedor'])) &
        (df['Saldo Inicial'].between(saldo_range[0], saldo_range[1]))
    ]

    # --- P√ÅGINA PRINCIPAL ---
    if not df_filtered.empty:
        st.markdown("### Resumo Geral")
        col1, col2, col3 = st.columns(3)
        total_saldo = df_filtered['Saldo m√™s'].sum()
        num_registros = len(df_filtered)
        media_saldo = df_filtered['Saldo m√™s'].mean()
        col1.metric(label="Total do Saldo", value=f"R$ {total_saldo:,.2f}")
        col2.metric(label="N√∫mero de Registros", value=f"{num_registros:,}")
        col3.metric(label="Saldo M√©dio por Registro", value=f"R$ {media_saldo:,.2f}")

        st.markdown("<hr>", unsafe_allow_html=True)
        st.header("An√°lise Temporal com Detalhe por Filial")
        saldo_mensal_detalhado = df_filtered.groupby(['M√™s/Ano', 'Descri√ß√£o CR'])['Saldo m√™s'].sum().reset_index()
        hover_texts = {}
        for mes_ano in saldo_mensal_detalhado['M√™s/Ano'].unique():
            top_filiais = saldo_mensal_detalhado[saldo_mensal_detalhado['M√™s/Ano'] == mes_ano].nlargest(5, 'Saldo m√™s')
            text = "<br>".join([f"{row['Descri√ß√£o CR']}: R$ {row['Saldo m√™s']:,.2f}" for _, row in top_filiais.iterrows()])
            hover_texts[mes_ano] = text
        saldo_mensal_total = df_filtered.groupby('M√™s/Ano')['Saldo m√™s'].sum().reset_index()
        saldo_mensal_total['Detalhe'] = saldo_mensal_total['M√™s/Ano'].map(hover_texts).fillna('')
        saldo_mensal_total['M√™s/Ano'] = saldo_mensal_total['M√™s/Ano'].astype(str)
        fig_temporal = px.line(saldo_mensal_total, x='M√™s/Ano', y='Saldo m√™s', markers=True, title='Evolu√ß√£o Mensal do Saldo Total')
        fig_temporal.update_traces(customdata=saldo_mensal_total['Detalhe'], hovertemplate="<b>M√™s</b>: %{x}<br><b>Saldo Total</b>: R$ %{y:,.2f}<br><br><b>Top 5 Filiais no M√™s:</b><br>%{customdata}<extra></extra>")
        st.plotly_chart(fig_temporal, use_container_width=True)

        st.markdown("<hr>", unsafe_allow_html=True)
        st.header("An√°lise de Participa√ß√£o")
        col_part1, col_part2 = st.columns(2)

        with col_part1:
            st.subheader("Por Filial")
            saldo_por_filial = df_filtered.groupby('Descri√ß√£o CR')['Saldo m√™s'].sum().sort_values(ascending=False)
            top_n = st.slider("Selecione o top N de filiais:", 3, min(20, len(saldo_por_filial) if len(saldo_por_filial) > 3 else 4), 7, key="slider_filial")
            top_filiais = saldo_por_filial.head(top_n)
            soma_outros = saldo_por_filial.tail(len(saldo_por_filial) - top_n).sum()
            if soma_outros > 0:
                outros_series = pd.Series([soma_outros], index=['Outros'])
                df_plot_data = pd.concat([top_filiais, outros_series])
            else:
                df_plot_data = top_filiais
            df_plot_data = df_plot_data.reset_index()
            df_plot_data.columns = ['Descri√ß√£o CR', 'Saldo m√™s']
            fig_bar_filial = px.bar(df_plot_data.sort_values(by='Saldo m√™s', ascending=True), x='Saldo m√™s', y='Descri√ß√£o CR', orientation='h', text='Saldo m√™s', color_continuous_scale=px.colors.sequential.Teal, color='Saldo m√™s')
            fig_bar_filial.update_traces(texttemplate='R$ %{text:,.2f}', textposition='outside')
            st.plotly_chart(fig_bar_filial, use_container_width=True)

        with col_part2:
            st.subheader("Por Fornecedor")
            saldo_por_parceiro = df_filtered.groupby('Nome Parceiro')['Saldo m√™s'].sum().sort_values(ascending=False)
            top_n_parceiro = st.slider("Selecione o top N de fornecedores:", 3, min(20, len(saldo_por_parceiro) if len(saldo_por_parceiro) > 3 else 4), 10, key="slider_parceiro")
            top_parceiros = saldo_por_parceiro.head(top_n_parceiro)
            soma_outros_p = saldo_por_parceiro.tail(len(saldo_por_parceiro) - top_n_parceiro).sum()
            if soma_outros_p > 0:
                outros_series_p = pd.Series([soma_outros_p], index=['Outros'])
                df_plot_parceiro = pd.concat([top_parceiros, outros_series_p])
            else:
                df_plot_parceiro = top_parceiros
            df_plot_parceiro = df_plot_parceiro.reset_index()
            df_plot_parceiro.columns = ['Nome Parceiro', 'Saldo m√™s']
            fig_bar_parceiro = px.bar(df_plot_parceiro.sort_values(by='Saldo m√™s', ascending=True), x='Saldo m√™s', y='Nome Parceiro', orientation='h', text='Saldo m√™s', color='Saldo m√™s', color_continuous_scale=px.colors.sequential.Plasma)
            fig_bar_parceiro.update_traces(texttemplate='R$ %{text:,.2f}', textposition='outside')
            st.plotly_chart(fig_bar_parceiro, use_container_width=True)

        st.markdown("<hr>", unsafe_allow_html=True)
        st.header("Dados Brutos Filtrados")
        st.dataframe(df_filtered)
    else:
        st.warning("Nenhum dado encontrado para os filtros selecionados.")
else:
    st.warning("O Dashboard n√£o p√¥de ser carregado.")
